#region Using Statements
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Storage;
using Microsoft.Xna.Framework.GamerServices;
using MiniEngine;
#endregion

namespace JumpBlackAndRunWhite
{
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        UIController uiController;

        Player player;
        BlockCannon blockCannon;
        //PlatformMap platformMap;
        StarterPlatform starterPlatform;
        PlatformSpawner platformSpawner;
        //Map map = new Map();

        public Game1() : base()
        {
            graphics = new GraphicsDeviceManager(this);
            graphics.ToggleFullScreen();
            Content.RootDirectory = "Content";
            graphics.PreferredBackBufferHeight = 500;
            graphics.PreferredBackBufferWidth = 1000;
        }

        protected override void Initialize()
        {

            base.Initialize();
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            GameManager.CurrentGraphicsDevice = this.GraphicsDevice;
            GameManager.CurrentContent = this.Content;
            //this.map.TileSheet = Content.Load<Texture2D>("Tiles");
            //this.map.LoadMapFromTextfile("Content/Map.txt", 32, 10);

            initGame();
        }

        private void initGame()
        {
            player = new Player();
            //platformMap = new PlatformMap();
            blockCannon = new BlockCannon();
            starterPlatform = new StarterPlatform();
            platformSpawner = new PlatformSpawner();
            uiController = new UIController();
        }

        protected override void UnloadContent()
        {
        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            EventManager.Update(gameTime);
            CollisionManager.Update();

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);
            spriteBatch.Begin(SpriteSortMode.FrontToBack, BlendState.NonPremultiplied, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone);
            //this.map.RenderMap(spriteBatch);
            EventManager.Render(spriteBatch);
            spriteBatch.End();

            base.Draw(gameTime);
        }
    }
}
